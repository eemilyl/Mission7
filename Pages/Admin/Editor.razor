@page "/admin/books/edit/{id:long}"
@page "/admin/books/create"
@inherits OwningComponentBase<IBookstoreRepository>

<style>
    div.validation-message {
        color: rgb(220, 53, 69);
        font-weight: 500
    }
</style>

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Book</h3>

<EditForm Model="b" OnValidSubmit="SaveBook">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <!-- Here is my other bootstrap requirements: Floating Labels
        I changed the class of the div to form-floating and added ids and fors to the input and label tags.-->

    <div class="form-floating">
        <input class="form-control" id="floatingInputValue" disabled value="@b.BookId" />
        <label for="floatingInputValue">Book Id:</label>

    </div>
    <br />

    <div class="form-floating">

        <InputText class="form-control" id="floatingTitle" @bind-Value="b.Title"></InputText>
        <label for="floatingTitle">Title:</label>
        <ValidationMessage For="@(() => b.Title)"></ValidationMessage>

    </div>
    <br />
    <div class="form-floating">
        <InputText class="form-control" id="floatingAuthor" @bind-Value="b.Author"></InputText>
        <label for="floatingAuthor">Author:</label>
        <ValidationMessage For="@(() => b.Author)"></ValidationMessage>

    </div>
    <br />
    <div class="form-floating">
        <InputText class="form-control" id="floatingPublisher" @bind-Value="b.Publisher"></InputText>
        <label for="floatingPublisher">Publisher:</label>
        <ValidationMessage For="@(() => b.Publisher)"></ValidationMessage>

    </div>
    <br />
    <div class="form-floating">
        <InputText class="form-control" id="floatingISBN" @bind-Value="b.Isbn"></InputText>
        <label for="floatingISBN">ISBN:</label>
        <ValidationMessage For="@(() => b.Isbn)"></ValidationMessage>

    </div>
    <br />
    <div class="form-floating">
        <InputText class="form-control" id="floatingClass" @bind-Value="b.Classification"></InputText>
        <label for="floatingClass">Classification:</label>
        <ValidationMessage For="@(() => b.Classification)"></ValidationMessage>

    </div>
    <br />
    <div class="form-floating">
        <InputText class="form-control" id="floatingCategory" @bind-Value="b.Category"></InputText>
        <label for="floatingCategory">Category:</label>
        <ValidationMessage For="@(() => b.Category)"></ValidationMessage>

    </div>
    <br />

    <div class="form-floating">
        <InputNumber class="form-control" id="floatingPageCount" @bind-Value="b.PageCount"></InputNumber>
        <label for="floatingPageCount">Page Count:</label>
        <ValidationMessage For="@(() => b.PageCount)"></ValidationMessage>

    </div>
    <br />
    <div class="form-floating">
        <InputNumber class="form-control" id="floatingPrice" @bind-Value="b.Price"></InputNumber>
        <label for="floatingPrice">Price:</label>
        <ValidationMessage For="@(() => b.Price)"></ValidationMessage>

    </div>
    <br />
    <button type="submit" class="btn btn-@ThemeColor">Save</button>
    <NavLink class="btn btn-secondary" href="/admin/books">Cancel</NavLink>

</EditForm>

@code {
    [Parameter]
    public long Id { get; set; } = 0;

    public string ThemeColor => Id == 0 ? "primary" : "warning";

    public string TitleText => Id == 0 ? "Create" : "Edit";

    public Book b { get; set; } = new Book();

    public IBookstoreRepository repo => Service;

    protected override void OnParametersSet()
    {
        if (Id != 0) //Current Book
        {
            b = repo.Books.FirstOrDefault(x => x.BookId == Id);
        }
    }

    public void SaveBook()
    {
        if (Id == 0) //new Book
        {
            repo.CreateBook(b);
        }
        else
        {
            repo.SaveBook(b);
        }

        NavManager.NavigateTo("/admin/books", true);
    }

    [Inject]
    public NavigationManager NavManager { get; set; }
}